[{"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/_app.js":"1","/Users/eduardos/Desktop/live projects/plaidtest/client/pages/api/hello.js":"2","/Users/eduardos/Desktop/live projects/plaidtest/client/pages/index.js":"3","/Users/eduardos/Desktop/live projects/plaidtest/client/pages/login.js":"4","/Users/eduardos/Desktop/live projects/plaidtest/client/pages/register.js":"5","/Users/eduardos/Desktop/live projects/plaidtest/client/pages/user/dashboard.js":"6","/Users/eduardos/Desktop/live projects/plaidtest/client/components/AccountsList.js":"7","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Button.js":"8","/Users/eduardos/Desktop/live projects/plaidtest/client/components/CreditCards.js":"9","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Input.js":"10","/Users/eduardos/Desktop/live projects/plaidtest/client/components/PlaidButton.js":"11","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Transactions.js":"12","/Users/eduardos/Desktop/live projects/plaidtest/client/components/UserProfile.js":"13","/Users/eduardos/Desktop/live projects/plaidtest/client/pages/api/jwt.js":"14","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Categories.js":"15","/Users/eduardos/Desktop/live projects/plaidtest/client/components/CheckingInfoBox.js":"16","/Users/eduardos/Desktop/live projects/plaidtest/client/components/CreditLiabilityBox.js":"17","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Overview.js":"18","/Users/eduardos/Desktop/live projects/plaidtest/client/components/ProfileSettings.js":"19","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Settings.js":"20","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Slider.js":"21","/Users/eduardos/Desktop/live projects/plaidtest/client/components/Sortby.js":"22","/Users/eduardos/Desktop/live projects/plaidtest/client/components/TimeFilter.js":"23","/Users/eduardos/Desktop/live projects/plaidtest/client/components/TotalEarnedBox.js":"24","/Users/eduardos/Desktop/live projects/plaidtest/client/components/TotalSpendBox.js":"25","/Users/eduardos/Desktop/live projects/plaidtest/client/components/TransactionItem.js":"26"},{"size":535,"mtime":1660347465688,"results":"27","hashOfConfig":"28"},{"size":170,"mtime":1658698018232,"results":"29","hashOfConfig":"28"},{"size":70,"mtime":1659601845000,"results":"30","hashOfConfig":"28"},{"size":2962,"mtime":1659794524785,"results":"31","hashOfConfig":"28"},{"size":3864,"mtime":1660411709539,"results":"32","hashOfConfig":"28"},{"size":4721,"mtime":1660411718738,"results":"33","hashOfConfig":"28"},{"size":3840,"mtime":1660441784797,"results":"34","hashOfConfig":"28"},{"size":550,"mtime":1660091891952,"results":"35","hashOfConfig":"28"},{"size":7266,"mtime":1660239327587,"results":"36","hashOfConfig":"28"},{"size":940,"mtime":1659741016934,"results":"37","hashOfConfig":"28"},{"size":4004,"mtime":1660411667917,"results":"38","hashOfConfig":"28"},{"size":22636,"mtime":1660441877496,"results":"39","hashOfConfig":"28"},{"size":1534,"mtime":1660348529469,"results":"40","hashOfConfig":"28"},{"size":622,"mtime":1660345705413,"results":"41","hashOfConfig":"28"},{"size":4389,"mtime":1660411641609,"results":"42","hashOfConfig":"28"},{"size":522,"mtime":1660403520853,"results":"43","hashOfConfig":"28"},{"size":2278,"mtime":1660407717182,"results":"44","hashOfConfig":"28"},{"size":8163,"mtime":1660441808451,"results":"45","hashOfConfig":"28"},{"size":2691,"mtime":1660441827588,"results":"46","hashOfConfig":"28"},{"size":806,"mtime":1660065215764,"results":"47","hashOfConfig":"28"},{"size":628,"mtime":1660396701710,"results":"48","hashOfConfig":"28"},{"size":1466,"mtime":1660411675517,"results":"49","hashOfConfig":"28"},{"size":1865,"mtime":1660411684611,"results":"50","hashOfConfig":"28"},{"size":3202,"mtime":1660411693955,"results":"51","hashOfConfig":"28"},{"size":2439,"mtime":1660411698914,"results":"52","hashOfConfig":"28"},{"size":2272,"mtime":1660397125080,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ox8f38",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/_app.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/api/hello.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/index.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/login.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/register.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/user/dashboard.js",["137"],[],"import {useContext, useEffect } from 'react';\nimport { ItemsContext } from '../../context/creditcards';\nimport { UserContext } from '../../context/signedUser';\nimport { TabContext } from '../../context/currentTab';\nimport CreditCards from '../../components/CreditCards'\nimport UserProfile from '../../components/UserProfile'\nimport AccountsList from '../../components/AccountsList'\nimport Transactions from '../../components/Transactions'\nimport { verify, decode } from 'jsonwebtoken';\nimport { getUserItems } from '../../function/getUserItems';\nimport { getItemInfo } from '../../function/getItemInfo';\nimport { getAccountLiabilities } from '../../function/getAccountLiabilities';\nimport Settings from '../../components/Settings';\nimport Overview from '../../components/Overview';\nimport { getAccountTransactions } from '../../function/getAccountTransactions';\nimport { verifyToken } from '../../function/verifyToken';\nimport { ThemeContext } from '../../context/themePreference';\n\nexport default function Home({jwtDecodedUser, userAccounts,transactionsSort}) {\n  const {setSignedUser} = useContext(UserContext)\n  const {tab} = useContext(TabContext)\n  const {theme} = useContext(ThemeContext)\n  const {bankAccounts,setBankAccounts} = useContext(ItemsContext)\n  setSignedUser(jwtDecodedUser)\n  useEffect(()=>{\n    setBankAccounts(userAccounts)\n  },[])\n  return (\n    <main>\n      <section className = {`w-full h-screen mx-auto overflow-hidden ${theme === 'dark' ? 'bg-neutral-900' : 'bg-white'}`}>\n        <div className = \"grid w-full h-full grid-cols-6\">\n            <div className = {`flex flex-col justify-between w-full h-full p-2 rounded-tr-xl ${theme === 'dark' ? 'bg-neutral-800/50' : 'bg-white'} rounded-br-xl sm:p-4`}>\n                <h1 className = \"w-full max-w-xs mt-10 ml-auto text-3xl font-semibold text-center text-white \">\n                  <span className = {`hidden lg:block ${theme === 'dark' ? 'text-white' : 'text-neutral-900'}`}>Moneypal</span>\n                  <span className={`block lg:hidden ${theme === 'dark' ? 'text-white' : 'text-neutral-900'}`}>M</span>\n                </h1>\n                <UserProfile/>\n                <AccountsList/>\n            </div>\n          <div className = \"relative w-full h-full col-span-5 bg-neutral-900 rounded-tl-3xl rounded-bl-3xl removeScrollbar\">\n            <div className = \"relative h-full p-10\">\n              <Overview/>\n              <CreditCards/>\n              <Transactions/>\n              <Settings/>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n  )\n}\n\nexport const getServerSideProps = async (context)=>{\n  // verifyToken()\n  // return{\n  //   props:{}\n  // }\n  try{\n    const cookies = context.req.headers.cookie;\n    const userJWT = cookies.slice(5)\n    if(verify(userJWT,process.env.ACCESS_TOKEN_SECRET)){\n      const userAccounts = await getUserItems(decode(userJWT).userId)\n      const userAccountsInfo = await getItemInfo(userAccounts)\n      const accountsLiabilities = await getAccountLiabilities(userAccounts)\n      // const accountTransactions = await getAccountTransactions(userAccounts)\n      // TODO, format items, bankaccounts, and bank account liabilities into one object\n      // NOTE, if theres an easier way of doing this pls redo\n      let formatAccounts = []\n\n      // TODO, add to formatAccounts arr.\n      userAccountsInfo.forEach((userAccount)=>{\n        formatAccounts.push(userAccount)\n      })\n\n      // TODO, loop accountsLiabilities\n      accountsLiabilities.forEach((accountLiability)=>{\n        if(accountLiability.accounts){\n          // TODO, loop through format accounts, and check if theres a match\n          formatAccounts.forEach((account,formatAccountIndex)=>{\n            accountLiability.liabilities?.credit?.forEach((accLiability)=>{\n              // TODO, if theres a match between account ids, get the position number\n              const pos = account.accounts?.findIndex(account=> account.account_id === accLiability.account_id)\n              if(pos === undefined){\n                return\n              }\n\n              // TODO, set new found information into array, positions formataccoutns using the formataccount index, and \n              // the accounts with  the new found position\n              formatAccounts[formatAccountIndex].accounts[pos] = {...formatAccounts[formatAccountIndex].accounts[pos], accLiability } \n            })\n          })\n        }\n      })\n\n      \n\n      return{\n        props:{jwtDecodedUser: decode(userJWT), userAccounts: formatAccounts || null}\n      }\n    }\n    throw error\n  }catch(e){\n    console.log(\"please work man\",e)\n    return {\n      redirect: {\n        permanent: false,\n        destination: \"/\"\n      }\n    }\n  }\n}\n\n\n","/Users/eduardos/Desktop/live projects/plaidtest/client/components/AccountsList.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Button.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/CreditCards.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Input.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/PlaidButton.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Transactions.js",["138","139","140","141","142"],[],"\n\nimport { useContext, useEffect, useState } from \"react\"\nimport { ItemsContext } from \"../context/creditcards\"\nimport { ArrowSmLeftIcon, XIcon } from \"@heroicons/react/solid\"\nimport { TabContext } from \"../context/currentTab\"\nimport Button from '../components/Button'\nimport TimeFilter from \"./TimeFilter\"\nimport Categories from \"./Categories\"\nimport { getTransactions } from \"../function/getTransactions\"\nimport Sortby from \"./Sortby\"\nimport Slider from \"./Slider\"\nimport TransactionItem from \"./TransactionItem\"\nimport CreditLiabilityBox from \"./CreditLiabilityBox\"\nimport CheckingInfoBox from \"./CheckingInfoBox\"\nimport TotalEarnedBox from './TotalEarnedBox'\nimport TotalSpendBox from \"./TotalSpendBox\"\n\nexport default function Transactions(){\n  const {transactions, bankAccounts, transactionsId, setBankAccounts} = useContext(ItemsContext)\n  const {tab,setTab} = useContext(TabContext)\n  const [displayAmount, setDisplayAmount] = useState(0)\n  const [penalty, setPenalty] = useState(0)\n  const [userLocale, setUserLocale] = useState()\n  const [categories, setCategories] = useState()\n  const [renderAmount, setRenderAmount] = useState(3)\n  const [openTrackSpending, setOpenTrackSpending] = useState(false)\n  const [display, setDisplay] = useState(null)\n  const [timeframe, setTimeframe] = useState('6 months')\n  const [sortBy, setSortBy] = useState()\n\n  \n  // TODO, use effect is used to handle the display for this component. \n  // It depends on the transactionsId state which is being set on the credit cards\n  // page when a user decides to view more information.\n  useEffect(()=>{\n    let pos;\n    bankAccounts.forEach((bankAccount,bankIndex)=>{\n      if(!bankAccount.accounts){\n        return\n      }\n      pos = bankAccount.accounts?.findIndex(acc=> acc.account_id === transactionsId)\n      // TODO, if a match is found, stop searching and set the display data\n      if(pos != -1){\n        setDisplay(bankAccounts[bankIndex].accounts[pos])\n        setDisplayAmount(bankAccounts[bankIndex]?.accounts[pos]?.balances?.current)\n      }\n    })\n    return(()=>{})\n  },[transactionsId])\n\n\n  // TODO, use effect is used to handle users interests if they decide to do a custom payment amount through the slider.\n  useEffect(()=>{\n    // TODO, error handling, this is if the user chooses to view their checkings.\n    if(!display?.accLiability) return\n\n    // TODO, cannot display penalties if custom amoutn is greater than the statement balance.\n    if(displayAmount >= display?.accLiability?.last_statement_balance){\n      setPenalty(0)\n      return\n    }\n    const apr = display.accLiability?.aprs.filter(apr => apr.apr_type === 'purchase_apr') || 29.99\n    const penalty = ((apr[0]?.apr_percentage || 29.99 / 100).toFixed(4) / 12 * display.balances?.current) - ((apr[0]?.apr_percentage || 29.99 / 100).toFixed(4) / 12 * displayAmount)\n    setPenalty(penalty.toFixed(2))\n  },[displayAmount])\n\n  //TODO, use effect is used to determine users language preference\n  useEffect(()=>{\n    let isMounted = true\n    // TODO, figure out the users language preference, used to format the currency display.\n    const navigator = navigator?.languages && navigator?.languages.length ? navigator?.languages[0] : navigator?.language\n    if(isMounted){\n      setUserLocale(navigator || 'en-us')  \n    }\n\n    // TODO, cleanup function\n    return(()=>{\n      isMounted=false\n    })\n  },[])\n\n  \n  const formatDate = (e) =>{\n    // TODO, return formatted date for a better user experience\n    const months = ['January','February','March','April','May','June','July','August','September','October','November','December']\n    if(!e){\n      return  \n    }\n    // TODO, split the given date, usually in the format yyyy-mm-dd\n    const splitDate = e.split(\"-\")\n    const month = months[parseInt(splitDate[1]) -1]\n    const year = splitDate[0]\n    const day = splitDate[2]\n    return{month,year,day}\n  }\n\n  // TODO, everytime a user leaves the transactions page/component, set the default timeframe to 6 months, this way\n  // weird ui glitches are avoided. \n  useEffect(()=>{\n    console.log('ok bro')\n    if(tab != 'Transactions'){\n      setTimeframe('6 months')\n    }\n  },[tab])\n\n\n  // TODO, used effect is used to filter out transactions for the categories section. Only runs when the display state changes\n  useEffect(()=>{\n    let filterCategories = []\n    // TODO, check if object has data in it, else, don't run\n    if(display != null){\n      // TODO, for each transaction, push a category that isn't already inside the \n      // array, if array contains category, add transaction to the correct category.\n      switch(timeframe){\n        case '6 months':\n          display?.transactions?.forEach((transaction)=>{\n            if(!filterCategories.some(obj => obj.category === transaction.category[1])){\n              // TODO, create new array adding the category name and the transactions\n              const obj = {category:transaction.category[1] || transaction.category[0], transactions:[transaction]}\n              filterCategories.push(obj)\n              setCategories(filterCategories)\n            }else{\n              // TODO, if cateogory name already exists, add the current transaction to that array. \n              const pos = filterCategories.findIndex(obj=>obj.category === transaction.category[1])\n              filterCategories[pos].transactions.push(transaction)\n              setCategories(filterCategories)\n            }\n          })\n          break\n        case '12 months':\n          display?.twelveMonthTransactions?.forEach((transaction)=>{\n            if(!filterCategories.some(obj => obj.category === transaction.category[1])){\n              // TODO, create new array adding the category name and the transactions\n              const obj = {category:transaction.category[1] || transaction.category[0], transactions:[transaction]}\n              filterCategories.push(obj)\n              setCategories(filterCategories)\n            }else{\n              // TODO, if cateogory name already exists, add the current transaction to that array. \n              const pos = filterCategories.findIndex(obj=>obj.category === transaction.category[1])\n              filterCategories[pos].transactions.push(transaction)\n              setCategories(filterCategories)\n            }\n          })\n          break\n        case '24 months':\n          display?.twentyFourMonthTransactions?.forEach((transaction)=>{\n            if(!filterCategories.some(obj => obj.category === transaction.category[1])){\n              // TODO, create new array adding the category name and the transactions\n              const obj = {category:transaction.category[1] || transaction.category[0], transactions:[transaction]}\n              filterCategories.push(obj)\n              setCategories(filterCategories)\n            }else{\n              // TODO, if cateogory name already exists, add the current transaction to that array. \n              const pos = filterCategories.findIndex(obj=>obj.category === transaction.category[1])\n              filterCategories[pos].transactions.push(transaction)\n              setCategories(filterCategories)\n            }\n          })\n          break\n        case 'YTD':\n          display?.ytdTransactions?.forEach((transaction)=>{\n            if(!filterCategories.some(obj => obj.category === transaction.category[1])){\n              // TODO, create new array adding the category name and the transactions\n              const obj = {category:transaction.category[1] || transaction.category[0], transactions:[transaction]}\n              filterCategories.push(obj)\n              setCategories(filterCategories)\n            }else{\n              // TODO, if cateogory name already exists, add the current transaction to that array. \n              const pos = filterCategories.findIndex(obj=>obj.category === transaction.category[1])\n              filterCategories[pos].transactions.push(transaction)\n              setCategories(filterCategories)\n            }\n          })\n          break\n      }\n    }\n  },[display])\n\n  // TODO, change transactions once user has changed the filter value. Default is '6 Months'\n  useEffect(()=>{\n    switch(timeframe){\n      // TODO, 6 months is default transactions, do not alter anything. \n      case '6 months':\n        return\n      case 'YTD':\n        bankAccounts.forEach(async (account,bankAccountIndex)=>{\n          const accountIdPos = account.accounts?.findIndex(acc => acc.account_id === display.account_id)\n          // TODO, check if an id is found, if not return \n          if(accountIdPos == -1 || accountIdPos === undefined){\n            return\n          }else{\n            // TODO, check if object already exists, do not run getTransactions multiple times\n            if(bankAccounts[bankAccountIndex].accounts[accountIdPos].hasOwnProperty('ytdTransactions')){\n              return\n            }else{\n              // TODO, if an object is not found, create the object and store in bank accounts.\n              let today = new Date().getMonth() + 1 \n              let monthsTillJan = 0;\n\n              // TODO, figure out how many months is it from the current month to January. \n              while(today > 1){\n                monthsTillJan+=1\n                today--\n              }\n              // TODO, get transactions from the new data and store into bankAccounts state\n              const ytdTransactions = await getTransactions(monthsTillJan,bankAccounts[bankAccountIndex].accessToken, transactionsId)\n              const addYtd = [...bankAccounts]\n              addYtd[bankAccountIndex].accounts[accountIdPos] = {...addYtd[bankAccountIndex].accounts[accountIdPos], ytdTransactions: ytdTransactions}\n              await setBankAccounts(addYtd)\n\n              // TODO, cause state to rerender\n              setDisplay(bankAccounts[bankAccountIndex].accounts[accountIdPos])\n            }\n          }\n        })\n        break;\n      case '12 months':\n        bankAccounts.forEach(async (account,bankAccountIndex)=>{\n          const accountIdPos = account.accounts?.findIndex(acc => acc.account_id === display.account_id)\n          // TODO, check if an id is found, if not return \n          if(accountIdPos == -1 || accountIdPos === undefined){\n            return\n          }else{\n            // TODO, check if object already exists, do not run getTransactions multiple times\n            if(bankAccounts[bankAccountIndex].accounts[accountIdPos].hasOwnProperty('twelveMonthTransactions')){\n              return\n            }else{\n              // TODO, get transactions from the new data and store into bankAccounts state\n              const twelveMonthTransactions = await getTransactions(12,bankAccounts[bankAccountIndex].accessToken, transactionsId)\n              const addTwelveMonth = [...bankAccounts]\n              addTwelveMonth[bankAccountIndex].accounts[accountIdPos] = {...addTwelveMonth[bankAccountIndex].accounts[accountIdPos], twelveMonthTransactions: twelveMonthTransactions}\n              await setBankAccounts(addTwelveMonth)\n\n              // TODO, cause state to rerender\n              setDisplay(bankAccounts[bankAccountIndex].accounts[accountIdPos])\n            }\n          }\n        })\n        break;\n      case '24 months':\n        bankAccounts.forEach(async (account,bankAccountIndex)=>{\n          const accountIdPos = account.accounts?.findIndex(acc => acc.account_id === display.account_id)\n          // TODO, check if an id is found, if not return \n          if(accountIdPos == -1 || accountIdPos === undefined){\n            return\n          }else{\n            // TODO, check if object already exists, do not run getTransactions multiple times\n            if(bankAccounts[bankAccountIndex].accounts[accountIdPos].hasOwnProperty('twentyFourMonthTransactions')){\n              return\n            }else{\n              // TODO, get transactions from the new data and store into bankAccounts state\n              const twentyFourMonthTransactions = await getTransactions(24,bankAccounts[bankAccountIndex].accessToken, transactionsId)\n              const addTwentyFourMonth = [...bankAccounts]\n              addTwentyFourMonth[bankAccountIndex].accounts[accountIdPos] = {...addTwentyFourMonth[bankAccountIndex].accounts[accountIdPos], twentyFourMonthTransactions: twentyFourMonthTransactions}\n              await setBankAccounts(addTwentyFourMonth)\n\n              // TODO, cause state to rerender\n              setDisplay(bankAccounts[bankAccountIndex].accounts[accountIdPos])\n            }\n          }\n        })\n        break;\n    }\n    return(()=>{})\n  },[timeframe])\n\n\n  // TODO, this useeffect handles filtering from old to new / vice versa\n  useEffect(()=>{\n    if(display != null){\n      const sortTransactions = () =>{\n        // TODO, based on timeframe, sort transactions accordingly\n        switch(timeframe){\n          case '6 months':\n            // TODO, check the sortby value.\n            if(sortBy === 'Newest to Oldest'){\n              const NewToOld = display?.transactions?.sort(function(a,b){\n                return new Date(b.date) - new Date(a.date)\n              })\n\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = NewToOld\n              setDisplay(displayArr)\n            }else{\n              const OldToNew = display?.transactions?.sort(function(a,b){\n                return new Date(a.date) - new Date(b.date)\n              })\n\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = OldToNew\n              setDisplay(displayArr)\n            }\n            break;\n          case 'YTD':\n            // TODO, check the sortby value.\n            if(sortBy === 'Newest to Oldest'){\n              const NewToOld = display?.ytdTransactions?.sort(function(a,b){\n                return new Date(b.date) - new Date(a.date)\n              })\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = NewToOld\n              setDisplay(displayArr)\n            }else{\n              const OldToNew = display?.ytdTransactions?.sort(function(a,b){\n                return new Date(a.date) - new Date(b.date)\n              })\n\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = OldToNew\n              setDisplay(displayArr)\n            }\n            break;\n          case '12 months':\n            // TODO, check the sortby value.\n            if(sortBy === 'Newest to Oldest'){\n              const NewToOld = display?.twelveMonthTransactions?.sort(function(a,b){\n                return new Date(b.date) - new Date(a.date)\n              })\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = NewToOld\n              setDisplay(displayArr)\n            }else{\n              const OldToNew = display?.twelveMonthTransactions?.sort(function(a,b){\n                return new Date(a.date) - new Date(b.date)\n              })\n\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = OldToNew\n              setDisplay(displayArr)\n            }\n            break;\n          case '24 months':\n            // TODO, check the sortby value.\n            if(sortBy === 'Newest to Oldest'){\n              const NewToOld = display?.twentyFourMonthTransactions?.sort(function(a,b){\n                return new Date(b.date) - new Date(a.date)\n              })\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = NewToOld\n              setDisplay(displayArr)\n            }else{\n              const OldToNew = display?.twentyFourMonthTransactions?.sort(function(a,b){\n                return new Date(a.date) - new Date(b.date)\n              })\n\n              // TODO, reference current display\n              const displayArr = display\n  \n              // TODO, replace current display transactions with reversed transactions\n              displayArr.transactions = OldToNew\n              setDisplay(displayArr)\n            }\n            break;\n        }\n      }\n      sortTransactions()\n    }\n    return(()=>{})\n  },[sortBy, timeframe])\n\nreturn (\n    <div className = {`absolute top-0 bottom-0 left-0 right-0 h-full px-4  rounded-xl bg-neutral-900 ${tab === 'Transactions' ? 'translate-x-0' : 'translate-x-full'} transition duration-300 ease-in-out`}>\n      <div className = \"grid w-full h-full overflow-y-scroll xl:grid-cols-2 gap-x-6 removeScrollbar\">\n        {display != null && (\n          <>\n            <div>\n              <div className = \"w-full py-10 \">\n                <h1 className = \"flex items-center justify-start text-2xl font-semibold text-white sm:text-3xl lg:text-4xl gap-x-3\">\n                  <span onClick = {()=>setTab('View Accounts')}><ArrowSmLeftIcon className = \"w-12 h-12 text-red-500 transition cursor-pointer hover:text-red-500/75\"/></span>\n                  <span className = \"text-xl sm:text-3xl lg:text-4xl\">{display?.official_name}</span>\n                </h1>\n                <p className = \"mt-2 text-neutral-400\">View all your most recent transactions.</p>\n              </div>\n              <div className = \"grid w-full grid-cols-4 gap-3 my-2 xl:grid-cols-3 rounded-xl\">\n                  {display.accLiability ? \n                    <>\n                      <CreditLiabilityBox display = {display} displayAmount = {displayAmount} userLocale = {userLocale} penalty = {penalty}/>\n                    </>\n                    :\n                    <>\n                      <CheckingInfoBox displayAmount = {displayAmount} userLocale = {userLocale} display = {display}/>\n                    </>\n                  }\n                  <TotalEarnedBox display = {display} timeframe = {timeframe} userLocale = {userLocale}/>\n                  <TotalSpendBox display = {display} timeframe = {timeframe} userLocale = {userLocale}/>\n              </div>\n\n              {/* Custom payments slider, only available for credit card accounts. */}\n              {display.accLiability && (\n                <Slider display = {display} setDisplayAmount = {setDisplayAmount}/>\n              )}\n              \n              {/* Transactions */}\n              <div className = \"mt-16 mb-2\">\n                <p className = \"mb-2 text-2xl font-semibold text-white\">Transactions</p>\n                <Sortby setSortBy = {setSortBy} timeframe = {timeframe} display = {display}/>\n                <TimeFilter setTimeframe = {setTimeframe} timeframe = {timeframe} display = {display}/>\n              </div>\n\n              <div className = \"p-6 mb-10 rounded-xl bg-neutral-800/50\">\n                <div className = \"flex flex-col items-start justify-between gap-6 lg:flex-row\">\n                </div>\n                {timeframe === '6 months' && (\n                  <>\n                  {display.transactions?.map((transaction,index)=>(\n                    <TransactionItem display = {display} transaction = {transaction} index = {index} key = {index}/>\n                  ))}\n                  </>\n                )}\n                {timeframe === 'YTD' && (\n                  <>\n                    {display?.ytdTransactions?.map((transaction,index)=>(\n                      <TransactionItem display = {display} transaction = {transaction} index = {index} key = {index}/>\n                    ))}\n                  </>\n                )}\n                {timeframe === '12 months' && (\n                  <>\n                    {display?.twelveMonthTransactions?.map((transaction,index)=>(\n                      <TransactionItem display = {display} transaction = {transaction} index = {index} key = {index}/>\n                    ))}\n                  </>\n                )}\n                {timeframe === '24 months' && (\n                  <>\n                    {display?.twentyFourMonthTransactions?.map((transaction,index)=>(\n                      <TransactionItem display = {display} transaction = {transaction} index = {index} key = {index}/>\n                    ))}\n                  </>\n                )}\n\n              </div>\n            </div>\n            \n\n            {/* SPENDING BY CATEGORIES */}\n            <div className = {`xl:bg-black/0  xl:block \n            z-20 ${openTrackSpending ? 'bg-black/50' : 'bg-black-0'} transition\n            fixed inset-0 pointer-events-none\n            `}>\n              <div className = {`\n                xl:w-[50%] xl:h-full px-6 rounded-xl xl:block xl:py-6\n                overflow-y-scroll\n                removeScrollbar\n                absolute top-0 right-0 bottom-0  bg-neutral-900 w-[80%] sm:w-[70%] py-24 pointer-events-auto\n                ${openTrackSpending ? 'translate-x-0 xl:translate-x-0':'translate-x-full xl:translate-x-0'}\n                transition\n                `}>\n                <div className = \"absolute top-0 right-0 mt-6 mr-6 text-xl xl:hidden\"\n                onClick = {()=>setOpenTrackSpending(!openTrackSpending)}\n                ><XIcon className = \"w-8 h-8 text-red-500 transition cursor-pointer hover:text-red-500/50\"/></div>\n                <h1 className = \"flex items-center justify-start text-2xl font-semibold text-white sm:text-3xl lg:text-4xl gap-x-3\">Track your spending</h1>\n                <p className = \"mt-2 text-gray-400\">Track all your spendature through categories.</p>\n                {categories?.map((category)=>(\n                  <>\n                  {(category.category != 'Credit Card' &&  category.category != 'Credit' && category.category != \"Payroll\" && category.category != 'Deposit' && category.category != 'Withdrawal' && category.category != 'Refund') && (\n                    <Categories category = {category} display = {display}/>\n                  )}\n                  </>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n)}","/Users/eduardos/Desktop/live projects/plaidtest/client/components/UserProfile.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/pages/api/jwt.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Categories.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/CheckingInfoBox.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/CreditLiabilityBox.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Overview.js",["143","144"],[],"import { DotsHorizontalIcon, ClockIcon, CashIcon, CreditCardIcon} from \"@heroicons/react/solid\"\nimport { ItemsContext } from \"../context/creditcards\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { TabContext } from \"../context/currentTab\"\nimport PlaidButton from \"./PlaidButton\"\nimport { UserContext } from \"../context/signedUser\"\nconst Overview = () => {\n  const {bankAccounts,setBankAccounts} = useContext(ItemsContext)\n  const {signedUser} = useContext(UserContext)\n  const {tab} = useContext(TabContext)\n  const [debtDueSoon, setDebtDueSoon] = useState()\n  const [totalDebt, setTotalDebt] = useState()\n  const [userLocale, setUserLocale] = useState('en-us')\n\n  //TODO, use effect is used to determine users language preference\n  useEffect(()=>{\n    let isMounted = true\n    // TODO, figure out the users language preference, used to format the currency display.\n    const navigator = navigator?.languages && navigator?.languages.length ? navigator?.languages[0] : navigator?.language\n    if(isMounted){\n      setUserLocale(navigator || 'en-us')  \n    }\n\n    console.log('infinitelooptest')\n    // TODO, cleanup function\n    return(()=>{\n      isMounted=false\n    })\n  },[])\n\n  // TODO, use effect is used to set a total debt. \n  useEffect(()=>{\n    (()=>{\n      let total = 0\n      bankAccounts.forEach((bankAccount)=>{\n        bankAccount.accounts?.map((account)=>{\n          if(account.subtype != 'credit card'){\n            return\n          }\n          total+= account.balances.current\n        })\n      })\n      setTotalDebt(total)\n    })()\n    console.log('infinitelooptest')\n  },[bankAccounts])\n\n\n  // TODO, use effect is used to display a card that is being due soon. Preferebly those that have a statement balance on them.\n  useEffect(()=>{\n    (()=>{\n      const creditCardsLiability = [];\n      bankAccounts.forEach((bankAccount)=>{\n        // TODO, only display accounts that are credit cards\n        bankAccount.accounts?.map((account)=>{\n          if(account.subtype != 'credit card'){\n            return\n          }\n\n          // TODO, get how many days are left till the user has to pay.\n          const today = new Date()\n          const dueDate = new Date(account.accLiability.next_payment_due_date)\n          const differenceInTime = dueDate.getTime() - today.getTime()\n          const differenceInDays = differenceInTime / (1000 * 3600 * 24)\n          if(differenceInDays < 0){\n            return  \n          }\n\n          // TODO, create an object displaying necessary information.\n          const cardObj = {\n            account:account,\n            due:account.balances.current,\n            statement:account.accLiability.last_statement_balance, \n            minimumDue: account.accLiability.minimum_payment_amount,\n            daysTillDue: parseInt(differenceInDays),\n            dueDate: account.accLiability.next_payment_due_date,\n            currencyCode: account.balances.iso_currency_code,\n          }\n          creditCardsLiability.push(cardObj)\n        })\n      })\n  \n      // TODO, sort credit cards by which card is due first.\n      creditCardsLiability.sort((a, b) => parseInt(a.daysTillDue) - parseFloat(b.daysTillDue));\n      setDebtDueSoon(creditCardsLiability)\n      console.log('infinitelooptest')\n    })()\n  },[bankAccounts.length])\n\n\n\n  // SPENDING BY MONTH, INTEGRATE SOON IDK\n  useEffect(()=>{\n    let accounts = []\n    const trackSpending = async () =>{\n      bankAccounts.forEach((bankAccount)=>{\n        bankAccount.accounts?.forEach((account)=>{\n          accounts.push(account)\n        })\n      })\n    }\n    trackSpending()\n    console.log('infinitelooptest')\n  },[bankAccounts.length])\n\n  return (\n    <div className = {`absolute inset-0 h-full px-10 py-16 z-20 bg-neutral-900 overflow-y-scroll removeScrollbar ${tab === 'Overview' ? 'translate-x-0' : 'translate-x-full'} transition`}>\n      <div className = \"w-full mb-24\">\n        <h1 className = \"text-2xl font-semibold text-white md:text-3xl xl:text-4xl\">Hi, {signedUser.firstName}, welcome back!</h1>\n        <p className = \"mt-2 text-neutral-400\">Let&apos;s give you a quick overview of your current week.</p>\n      </div>\n      <div className = \"w-full h-full\">\n        <p className = \"mb-2 text-sm font-medium text-neutral-400\">Helpful cards</p>\n        <div className = \"grid grid-cols-6 gap-6 \">\n          <div className = \"relative w-full col-span-6 p-6 shadow-xl lg:col-span-2 bg-zinc-800 rounded-xl\">\n            <CashIcon className = \"mb-2 text-white w-14 h-14\"/>\n            <h1 className = \"text-3xl font-medium text-white\">{totalDebt?.toLocaleString(userLocale, {style:'currency', currency:'USD'})}</h1>\n            <p className = \"text-sm text-neutral-400\">Total credit card debt</p>\n          </div>\n\n          <div className = \"relative w-full col-span-6 p-6 shadow-xl lg:col-span-4 bg-zinc-800 rounded-xl\">\n            <CreditCardIcon className = \"mb-2 text-white w-14 h-14\"/>\n            <p className = 'text-xl font-medium text-white'>{debtDueSoon?.length > 1 ? ('Debts are due soon') : ('A debt is due soon.')}</p>\n            <div className = \"grid w-full grid-cols-1 gap-6 p-4 my-2 sm:grid-cols-2 bg-zinc-900 rounded-xl\">\n              {debtDueSoon?.map((debt,index)=>(\n              <>\n                {debt?.due > 0 && (\n                  <div className = {`${index === 0 ? ('sm:col-span-2 bg-neutral-500 p-4 rounded-xl') : ('sm:col-span-1 bg-neutral-600/50 rounded-xl p-4')}`}>\n                    <p className = 'flex flex-wrap items-center justify-start gap-2 text-xs'>\n                      <span className = \"font-medium text-neutral-300\">{debt.account.name}</span>\n                      <span className = \"text-neutral-300\">*{debt.account.mask}</span>\n                    </p>\n                    <p className = \"mt-4 text-sm text-neutral-300/75\">\n                      {debt.statement ? 'Statement balance' : 'Total balance'}\n                    </p>\n                    <p className = \"text-2xl font-medium text-white\">{(debt.statement)?.toLocaleString(userLocale, {style: 'currency', currency:debt.currencyCode}) || (debt.due).toLocaleString(userLocale, {style: 'currency', currency:debt.currencyCode})}</p>\n                    <p className = \"mt-4 text-sm text-neutral-300/75\">\n                      <span>You have </span>\n                      <span className = \"font-medium text-white\">{debt.daysTillDue} </span>\n                      <span className = \"font-medium text-white\">{debt.daysTillDue === 1 ? 'day ' : 'days '}</span>\n                      <span>left to pay this off.</span>\n                    </p>\n                  </div>\n                )}\n                <>\n                  {debtDueSoon.length > 1 && (\n                    <>\n                    {!debt?.due === 0 && (\n                      <p className = \"text-white\">Some card</p>\n                    )}\n                    </>\n                  )}\n                </>\n              </>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <p className = \"mt-24 mb-2 text-sm font-medium text-neutral-400\">Accounts needed extra action.</p>\n        <div>\n        {bankAccounts.map((bankAccount)=>(\n          <>\n          {bankAccount.error && (\n            <div className = \"grid grid-cols-1 gap-16 p-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 bg-neutral-700/10 rounded-xl\">\n              <div className = \"flex flex-col items-start justify-center w-full grid-cols-1 px-4 py-6 transition rounded-lg bg-neutral-800 hover:shadow-md\" key = {bankAccount.error}>\n                <h3 className = \"mb-3 text-xl text-neutral-400\">{bankAccount.institution}</h3>\n                <div className = \"mb-5 text-sm text-neutral-600\">\n                  <p className = \"text-neutral-400\">This account requires extra attention.</p>\n                  <p className = \"text-xs\">Error: {bankAccount.error}</p>\n                </div>\n                <PlaidButton text = {bankAccount.error == 'ITEM_LOGIN_REQUIRED' && 'Relogin'} customCSS = 'w-full' removeOldItem = {bankAccount.id}/>\n              </div>\n            </div>\n          )}\n        </>\n        ))} \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Overview","/Users/eduardos/Desktop/live projects/plaidtest/client/components/ProfileSettings.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Settings.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Slider.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/Sortby.js",["145"],[],"import { ChevronDownIcon, FilterIcon,CollectionIcon } from '@heroicons/react/solid'\nimport {useEffect, useState} from 'react'\n\nconst Sortby = ({setSortBy, timeframe,display}) => {\n\n  const [sortValue, setSortValue] = useState('Newest to Oldest')\n  const [openModal, setOpenModal] = useState(false)\n\n  const handleSort = () =>{\n    console.log('work ?')\n    setSortValue(sortValue === 'Newest to Oldest' ? 'Oldest to Newest' : 'Newest to Oldest')\n    setSortBy(sortValue)\n  }\n\n  useEffect(()=>{\n    setSortValue('Newest to Oldest')\n    setSortBy(sortValue)\n    console.log('infinitelooptest')\n    return(()=>{})\n  },[display])\n\n\n  return (\n    <div className = \"inline-block text-white list-none bg-red-600 rounded-xl\" onClick = {()=>setOpenModal(!openModal)}>\n      <li className = \"flex w-full gap-3 px-4 py-2 text-sm transition cursor-pointer rounded-xl\">\n        {sortValue}\n        <ChevronDownIcon className = \"w-5 h-5\"/>\n      </li>\n      {openModal && (\n        <div className = \"rounded-full\">\n          <li className = \"flex gap-3 px-4 py-4 text-sm transition cursor-pointer rounded-bl-xl rounded-br-xl bg-red-700/90 hover:bg-red-800/50\" onClick = {()=>handleSort()}>\n          {sortValue === 'Newest to Oldest' ? \n            <>\n              Oldest to Newest\n            </>\n              \n          :\n            <>\n              Newest to Oldest\n            </>\n          }\n          </li>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Sortby","/Users/eduardos/Desktop/live projects/plaidtest/client/components/TimeFilter.js",["146","147"],[],"import { useEffect, useState } from \"react\"\nimport { ChevronLeftIcon } from \"@heroicons/react/solid\"\n\n\n\nconst TimeFilter = ({setTimeframe,timeframe, display}) => {\n  const filters = ['6 months','12 months','24 months','YTD']\n  const [currentFilter, setCurrentFilter] = useState(timeframe)\n  const [displayFilters, setDisplayFilters] = useState(false)\n\n  const handleFilterChange = (filter) =>{\n    setDisplayFilters(!displayFilters)\n    setCurrentFilter(filter)\n  }\n\n  useEffect(()=>{\n    setTimeframe(currentFilter)\n    console.log('infinitelooptest')\n    return(()=>{})\n  },[currentFilter])\n\n  useEffect(()=>{\n    setTimeframe('6 months')\n    setCurrentFilter('6 months')\n    console.log('infinitelooptest')\n  },[display])\n\n\n  return (\n    <div className = 'flex flex-wrap w-full gap-3 my-2'>\n      <li className = \"flex items-center justify-center px-4 py-2 text-xs font-medium text-white list-none transition cursor-pointer sm:text-sm bg-neutral-400/25 rounded-xl hover:bg-neutral-500/50 gap-x-2\"\n      onClick = {()=>setDisplayFilters(!displayFilters)}\n      >\n        <p className = \"flex items-center justify-center gpa-x-3\">{currentFilter}</p>\n        <span className = {`${displayFilters ? 'rotate-0' : 'rotate-180'} transition`}><ChevronLeftIcon className = \"w-5 h-5\" /></span>\n      </li>\n      <div className =\"flex gap-x-3\">\n        {filters.map((filter,index)=>(\n          <>\n            {filter != currentFilter && (\n              <li className = {`${displayFilters ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'} px-4 py-2 text-sm font-medium text-white list-none transition cursor-pointer bg-neutral-800/50 rounded-xl hover:bg-neutral-700`}\n              onClick = {()=>handleFilterChange(filter)}\n              >{filter}</li>\n            )}\n          </>\n\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default TimeFilter","/Users/eduardos/Desktop/live projects/plaidtest/client/components/TotalEarnedBox.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/TotalSpendBox.js",[],[],"/Users/eduardos/Desktop/live projects/plaidtest/client/components/TransactionItem.js",[],[],{"ruleId":"148","severity":1,"message":"149","line":27,"column":5,"nodeType":"150","endLine":27,"endColumn":7,"suggestions":"151"},{"ruleId":"148","severity":1,"message":"152","line":50,"column":5,"nodeType":"150","endLine":50,"endColumn":21,"suggestions":"153"},{"ruleId":"148","severity":1,"message":"154","line":66,"column":5,"nodeType":"150","endLine":66,"endColumn":20,"suggestions":"155"},{"ruleId":"148","severity":1,"message":"156","line":178,"column":5,"nodeType":"150","endLine":178,"endColumn":14,"suggestions":"157"},{"ruleId":"148","severity":1,"message":"158","line":266,"column":5,"nodeType":"150","endLine":266,"endColumn":16,"suggestions":"159"},{"ruleId":"148","severity":1,"message":"160","line":381,"column":5,"nodeType":"150","endLine":381,"endColumn":24,"suggestions":"161"},{"ruleId":"148","severity":1,"message":"152","line":88,"column":5,"nodeType":"150","endLine":88,"endColumn":26,"suggestions":"162"},{"ruleId":"148","severity":1,"message":"152","line":104,"column":5,"nodeType":"150","endLine":104,"endColumn":26,"suggestions":"163"},{"ruleId":"148","severity":1,"message":"164","line":20,"column":5,"nodeType":"150","endLine":20,"endColumn":14,"suggestions":"165"},{"ruleId":"148","severity":1,"message":"166","line":20,"column":5,"nodeType":"150","endLine":20,"endColumn":20,"suggestions":"167"},{"ruleId":"148","severity":1,"message":"166","line":26,"column":5,"nodeType":"150","endLine":26,"endColumn":14,"suggestions":"168"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setBankAccounts' and 'userAccounts'. Either include them or remove the dependency array.","ArrayExpression",["169"],"React Hook useEffect has a missing dependency: 'bankAccounts'. Either include it or remove the dependency array.",["170"],"React Hook useEffect has missing dependencies: 'display.accLiability' and 'display.balances'. Either include them or remove the dependency array.",["171"],"React Hook useEffect has a missing dependency: 'timeframe'. Either include it or remove the dependency array.",["172"],"React Hook useEffect has missing dependencies: 'bankAccounts', 'display.account_id', 'setBankAccounts', and 'transactionsId'. Either include them or remove the dependency array.",["173"],"React Hook useEffect has a missing dependency: 'display'. Either include it or remove the dependency array.",["174"],["175"],["176"],"React Hook useEffect has missing dependencies: 'setSortBy' and 'sortValue'. Either include them or remove the dependency array. If 'setSortBy' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["177"],"React Hook useEffect has a missing dependency: 'setTimeframe'. Either include it or remove the dependency array. If 'setTimeframe' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["178"],["179"],{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [setBankAccounts, userAccounts]",{"range":"201","text":"202"},"Update the dependencies array to be: [bankAccounts, transactionsId]",{"range":"203","text":"204"},"Update the dependencies array to be: [display.accLiability, display.balances, displayAmount]",{"range":"205","text":"206"},"Update the dependencies array to be: [display, timeframe]",{"range":"207","text":"208"},"Update the dependencies array to be: [bankAccounts, display.account_id, setBankAccounts, timeframe, transactionsId]",{"range":"209","text":"210"},"Update the dependencies array to be: [display, sortBy, timeframe]",{"range":"211","text":"212"},"Update the dependencies array to be: [bankAccounts, bankAccounts.length]",{"range":"213","text":"214"},{"range":"215","text":"214"},"Update the dependencies array to be: [display, setSortBy, sortValue]",{"range":"216","text":"217"},"Update the dependencies array to be: [currentFilter, setTimeframe]",{"range":"218","text":"219"},"Update the dependencies array to be: [display, setTimeframe]",{"range":"220","text":"221"},[1349,1351],"[setBankAccounts, userAccounts]",[2073,2089],"[bankAccounts, transactionsId]",[2878,2893],"[display.accLiability, display.balances, displayAmount]",[8007,8016],"[display, timeframe]",[12532,12543],"[bankAccounts, display.account_id, setBankAccounts, timeframe, transactionsId]",[16939,16958],"[display, sortBy, timeframe]",[3269,3290],"[bankAccounts, bankAccounts.length]",[3631,3652],[615,624],"[display, setSortBy, sortValue]",[576,591],"[currentFilter, setTimeframe]",[714,723],"[display, setTimeframe]"]